
buildscript {
    repositories {
        mavenCentral()
        maven { url("https://repo.spring.io/plugins-release") }
        maven { url("https://plugins.gradle.org/m2/") }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.6.RELEASE")
        classpath("org.owasp:dependency-check-gradle:1.3.6")
        classpath("gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1")
        classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
    }
}

apply plugin: "java"
apply plugin: "idea"
apply plugin: "org.springframework.boot"
apply plugin: "org.owasp.dependencycheck"
apply plugin: "com.github.hierynomus.license"
apply plugin: "jacoco"

jar {
    baseName = "credhub"
    def versionFile = new File("$projectDir/src/main/resources/version")
    if (System.getenv("VERSION")) {
        versionFile.write(System.getenv("VERSION"))
    }
}
sourceCompatibility = 1.8

targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
   [
            "org.springframework.boot:spring-boot-starter-web",
            "org.springframework.boot:spring-boot-starter-security",
            "org.springframework.boot:spring-boot-starter-data-jpa",
            "org.springframework.security.oauth:spring-security-oauth2",
            "org.springframework.security:spring-security-jwt",
            "org.springframework.security:spring-security-test"
    ].each{
        compile(it) {
            exclude module: "spring-boot-starter-logging"
            exclude module: "logback-classic"
        }
    }

    compile("org.springframework.boot:spring-boot-starter-log4j2")
    compile("org.passay:passay:1.1.0")
    compile("com.h2database:h2:1.4.192")
    compile("com.jayway.jsonpath:json-path:2.2.0")
    compile("org.bouncycastle:bcpkix-jdk15on:1.58")
    compile("com.google.guava:guava:19.0")
    compile("org.apache.commons:commons-lang3:3.4")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.7.5")
    compile("org.exparity:hamcrest-bean:1.0.11")
    compile("org.postgresql:postgresql:9.3-1100-jdbc4")
    compile("org.mariadb.jdbc:mariadb-java-client:1.5.8")
    compile("org.flywaydb:flyway-core:4.0.3")
    compile("net.java.dev.jna:jna:4.2.2")
    compile("org.apache.httpcomponents:httpclient:4.5.3")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.skyscreamer:jsonassert")
    testCompile("com.jayway.jsonpath:json-path-assert:2.2.0")
    testCompile("com.greghaskins:spectrum:1.0.0")
    testCompile("org.apache.commons:commons-lang3:3.4")
}

task wrapper(type: Wrapper) {
    gradleVersion = "3.1"
}

processResources {
    outputs.upToDateWhen { false }
}

jacoco {
    toolVersion = "0.7.6.201602180812"
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled false
        csv.enabled false
        html {
            enabled true
            destination "${project.buildDir}/reports/jacoco"
        }
    }
}

bootRun {
    addResources = true
    systemProperties["spring.profiles.active"] = System.getProperty("spring.profiles.active", "dev-h2")
    systemProperties["java.security.egd"] = System.getProperty("java.security.egd", "file:/dev/urandom")
}

task cleanAndAssemble(dependsOn: ['clean', 'assemble'])

assemble.mustRunAfter("clean")

test {
    jacoco {
        append = false
        destinationFile = file("${project.buildDir}/jacoco/jacocoTest.exec")
        classDumpFile = file("${project.buildDir}/jacoco/classpathdumps")
    }
    testLogging {
        events "passed", "failed", "skipped"
        exceptionFormat "full"
    }

    systemProperties["spring.profiles.active"] = System.getProperty("spring.profiles.active", "unit-test-h2")
    systemProperties["java.security.egd"] = System.getProperty("java.security.egd", "file:/dev/urandom")
    outputs.upToDateWhen { false }
}
